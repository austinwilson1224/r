NPLAYERS = 500L
d = play(strategy = simple_strategy(even), nplayers = NPLAYERS, ntimes = NTIMES)
mean_theory = function(time){
pwin = 18 / 37
m1 = -1 * (1 - pwin) + 1 * pwin
time * m1
}
sd_theory = function(time){
pwin = 18 / 37
mx2 = (-1)^2 * (1 - pwin) + 1^2 * pwin
v1 = mx2 - mean_theory(1)^2
v = time * v1
sqrt(v)
}
#' Compute summary statistics for a particular time
#'
#' @param ds data frame containing columns: `winnings`, `time` where all times are the same
#' @return data frame containing 1 row with columns: `time`, `sample_mean`, `sample_sd`
summary_at_time = function(ds)
{
time = ds$time[1]
w = ds$winnings
data.frame(time, sample_mean = mean(w), sample_sd = sd(w), median = median(w))
}
fancy = function(strategy = simple_strategy(even), quants = .9, nplayers = 5, nplayers_plot = 1, ntimes = 10000, print = TRUE) {
d = play(strategy = strategy, nplayers = nplayers, ntimes = ntimes)
ds = split(d, d$time)
dq = lapply(ds, summary_at_time)
dtheory = do.call(rbind, dq)
dtheory$pop_mean = mean_theory(dtheory$time)
dtheory$pop_sd = sd_theory(dtheory$time)
z_score = qnorm(quants)
dtheory$lower = with(dtheory, sample_mean - z_score * sample_sd)
dtheory$upper = with(dtheory, sample_mean + z_score * sample_sd)
example_lines = d[d$player <= nplayers_plot, ]
library(ggplot2)
sample_color = "red"
pop_color = "blue"
g = ggplot(data = dtheory) +
geom_line(data = example_lines, mapping = aes(x = time, y = winnings, group = player), alpha = 0.1, size = 0.3) +
geom_line(mapping = aes(x = time, y = sample_mean), color = sample_color) +
# geom_line(mapping = aes(x = time, y = pop_mean), color = pop_color) +
geom_line(mapping = aes(x = time, y = lower), linetype = conf_line) +
geom_line(mapping = aes(x = time, y = upper), linetype = conf_line) +
geom_line(mapping = aes(x = time, y = median), color = "cornflower blue", alpha = .5) +
labs(title = "many games of roulette and many players", caption = "Simulated winnings over time for  many roulette players betting one dollar on evens every time.")
if(print) {
print(g)
}
g
}
fancy_trash = fancy()
fancy(nplayers = 200)
fancy(nplayers = 200, ntimes = 2000)
fancy(nplayers = 200, quants = .95)
fancy(nplayers = 200, ntimes = 2000, quants = .95)
fancy(nplayers = 200, ntimes = 10000, quants = .95)
fancy(nplayers = 200, ntimes = 10000, quants = .95, nplayers_plot = 0)
question2 = fancy(nplayers = 200, quants = .95)
question2_2 = fancy(nplayers = 200, ntimes = 5000, quants = .95, nplayers_plot = 0)
question2_2 = fancy(nplayers = 200, ntimes = 5000, quants = .95, nplayers_plot = 0, strategy = simple_strategy(straightup))
set.seed(1380)
NTIMES = 10000L
NPLAYERS = 500L
d = play(strategy = simple_strategy(even), nplayers = NPLAYERS, ntimes = NTIMES)
mean_theory = function(time){
pwin = 18 / 37
m1 = -1 * (1 - pwin) + 1 * pwin
time * m1
}
sd_theory = function(time){
pwin = 18 / 37
mx2 = (-1)^2 * (1 - pwin) + 1^2 * pwin
v1 = mx2 - mean_theory(1)^2
v = time * v1
sqrt(v)
}
#' Compute summary statistics for a particular time
#'
#' @param ds data frame containing columns: `winnings`, `time` where all times are the same
#' @return data frame containing 1 row with columns: `time`, `sample_mean`, `sample_sd`
summary_at_time = function(ds)
{
time = ds$time[1]
w = ds$winnings
data.frame(time, sample_mean = mean(w), sample_sd = sd(w), median = median(w))
}
fancy = function(strategy = simple_strategy(even), quants = .9, nplayers = 5, nplayers_plot = 1, ntimes = 10000, print = TRUE, caption = "Simulated winnings over time for  many roulette players betting one dollar on evens every time.") {
d = play(strategy = strategy, nplayers = nplayers, ntimes = ntimes)
ds = split(d, d$time)
dq = lapply(ds, summary_at_time)
dtheory = do.call(rbind, dq)
dtheory$pop_mean = mean_theory(dtheory$time)
dtheory$pop_sd = sd_theory(dtheory$time)
z_score = qnorm(quants)
dtheory$lower = with(dtheory, sample_mean - z_score * sample_sd)
dtheory$upper = with(dtheory, sample_mean + z_score * sample_sd)
example_lines = d[d$player <= nplayers_plot, ]
library(ggplot2)
sample_color = "red"
pop_color = "blue"
g = ggplot(data = dtheory) +
geom_line(data = example_lines, mapping = aes(x = time, y = winnings, group = player), alpha = 0.1, size = 0.3) +
geom_line(mapping = aes(x = time, y = sample_mean), color = sample_color) +
# geom_line(mapping = aes(x = time, y = pop_mean), color = pop_color) +
geom_line(mapping = aes(x = time, y = lower), linetype = conf_line) +
geom_line(mapping = aes(x = time, y = upper), linetype = conf_line) +
geom_line(mapping = aes(x = time, y = median), color = "cornflower blue", alpha = .5) +
labs(title = "many games of roulette and many players", caption = caption)
if(print) {
print(g)
}
g
}
fancy_trash = fancy()
question2_2 = fancy(nplayers = 200, ntimes = 5000, quants = .95, nplayers_plot = 0, strategy = simple_strategy(straightup), caption = "straight up strategy")
question2_2 = fancy(nplayers = 200, ntimes = 5000, quants = .95, nplayers_plot = 0, strategy = doublebet, caption = "double bet / martingale")
question2_2 = fancy(nplayers = 200, ntimes = 5000, quants = .95, nplayers_plot = 0, strategy = doublebet)
question2_2 = fancy(nplayers = 1, ntimes = 5000, quants = .95, nplayers_plot = 0, strategy = doublebet)
question2_2 = fancy(nplayers = 1, ntimes = 1000, quants = .95, nplayers_plot = 0, strategy = doublebet)
question2_2 = fancy(nplayers = 1, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = doublebet)
View(doublebet)
View(doublebet)
View(even)
even_mandalay_bay = function(x)
{
win = (x %% 2 == 0) & (x != 0)
ifelse(win, 1, -1)
}
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
test_value = c(1,2)
test_bet = double_bet_mandalay_bay(test_value)
test_bet
even_mandalay_bay = function(x)
{
win = (x %% 2 == 0) & (x != 0)
ifelse(win, 1, -1)
}
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
test_value = c(1,2,2,2,2)
test_bet = double_bet_mandalay_bay(test_value)
test_bet
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1))
test_bet
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
test_bet
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(winnings[i] <= -5000) {
winnings[i] = current_winnings
next
}
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
print(winnings[i] <= -5000)
# if(winnings[i] <= -5000) {
#   winnings[i] = current_winnings
#   next
# }
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
test_bet
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
print(winnings[i] < -5000)
# if(winnings[i] <= -5000) {
#   winnings[i] = current_winnings
#   next
# }
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
test_bet
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
print(winnings[i])
# if(winnings[i] <= -5000) {
#   winnings[i] = current_winnings
#   next
# }
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
test_bet
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
# if(winnings[i] <= -5000) {
#   winnings[i] = current_winnings
#   next
# }
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
print(winnings[i])
}
winnings
}
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
test_bet
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(current_winnings - betsize < -5000) {
betsize = 0
winnings[i] = current_winnings
next
print("you're broke")
}
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
print(winnings[i])
}
winnings
}
test_bet = double_bet_mandalay_bay(c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1))
test_bet
465-225
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(current_winnings - betsize < -5000) {
betsize = 0
winnings[i] = current_winnings
next
# print("you're broke")
}
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
# print(winnings[i])
}
winnings
}
question2_2 = fancy(nplayers = 100, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = doublebet)
question2_2 = fancy(nplayers = 100, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = double_bet_mandalay_bay)
View(play)
question3_2 = fancy(nplayers = 100, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = double_bet_mandalay_bay, caption = "martingale fail")
question3_2 = fancy(nplayers = 100, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = double_bet_mandalay_bay, caption = "martingale fail")
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
# if(current_winnings - betsize < -5000) {
#   betsize = 0
#   winnings[i] = current_winnings
#   # next
#   break
#   # print("you're broke")
# }
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
# print(winnings[i])
}
winnings
}
question3_2 = fancy(nplayers = 100, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = double_bet_mandalay_bay, caption = "martingale fail")
double_bet_mandalay_bay = function(x, initialbet = 15, bet = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
# A NOTE TO THE GRADER -- this section of the code will prevent someone from gambling more money than they have. I commented this
if(current_winnings - betsize < -5000) {
betsize = 0
winnings[i] = current_winnings
next
}
if(bet(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
if(betsize * 2 <= 500) {
betsize = 2 * betsize
}
else {
betsize = 500
}
}
winnings[i] = current_winnings
}
winnings
}
question3_2 = fancy(nplayers = 100, ntimes = 4000, quants = .95, nplayers_plot = 0, strategy = double_bet_mandalay_bay, caption = "martingale fail")
set.seed(1380)
NTIMES = 10000L
NPLAYERS = 500L
d = play(strategy = simple_strategy(even), nplayers = NPLAYERS, ntimes = NTIMES)
mean_theory = function(time){
pwin = 18 / 37
m1 = -1 * (1 - pwin) + 1 * pwin
time * m1
}
sd_theory = function(time){
pwin = 18 / 37
mx2 = (-1)^2 * (1 - pwin) + 1^2 * pwin
v1 = mx2 - mean_theory(1)^2
v = time * v1
sqrt(v)
}
#' Compute summary statistics for a particular time
#'
#' @param ds data frame containing columns: `winnings`, `time` where all times are the same
#' @return data frame containing 1 row with columns: `time`, `sample_mean`, `sample_sd`
summary_at_time = function(ds)
{
time = ds$time[1]
w = ds$winnings
data.frame(time, sample_mean = mean(w), sample_sd = sd(w), median = median(w))
}
fancy = function(strategy = simple_strategy(even), quants = .9, nplayers = 5, nplayers_plot = 1, ntimes = 10000, print = TRUE, caption = "Simulated winnings over time for  many roulette players betting one dollar on evens every time.") {
d = play(strategy = strategy, nplayers = nplayers, ntimes = ntimes)
ds = split(d, d$time)
dq = lapply(ds, summary_at_time)
dtheory = do.call(rbind, dq)
dtheory$pop_mean = mean_theory(dtheory$time)
dtheory$pop_sd = sd_theory(dtheory$time)
z_score = qnorm(quants)
dtheory$lower = with(dtheory, sample_mean - z_score * sample_sd)
dtheory$upper = with(dtheory, sample_mean + z_score * sample_sd)
example_lines = d[d$player <= nplayers_plot, ]
library(ggplot2)
sample_color = "red"
pop_color = "blue"
g = ggplot(data = dtheory) +
geom_line(data = example_lines, mapping = aes(x = time, y = winnings, group = player), alpha = 0.1, size = 0.3) +
geom_line(mapping = aes(x = time, y = sample_mean), color = sample_color) +
# geom_line(mapping = aes(x = time, y = pop_mean), color = pop_color) +
geom_line(mapping = aes(x = time, y = lower)) +
geom_line(mapping = aes(x = time, y = upper)) +
geom_line(mapping = aes(x = time, y = median), color = "cornflower blue", alpha = .5) +
labs(title = "many games of roulette and many players", caption = caption)
if(print) {
print(g)
}
g
}
View(straightup)
View(straightup)
