average_absolute_difference = function(predicted, actual) {
length = length(predicted)
difference = predicted - actual
# difference_squared = difference ** 2
# absolute_difference = sqrt(difference_squared)
absolute_difference = abs(predicted- actual)
sum(absolute_difference, na.rm = TRUE) / length
}
prediction1 = predict(model1, test, na.rm = TRUE)
aad1 = average_absolute_difference(prediction1, test$TIC.Interest.Rate)
aad1
View(train)
some_model = lm(TIC.Interest.Rate ~ ., data = train)
test_numeric = test[,numeric_columns_]
test_numeric = na.omit(test_numeric)
View(test_numeric)
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
# print(column)
numeric_columns_ = c(numeric_columns_,column)
print(numeric_columns)
}
}
# numeric_columns_
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
# print(column)
numeric_columns_ = c(numeric_columns_,column)
print("\n\n")
print(numeric_columns_)
}
}
# numeric_columns_
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
# print(column)
numeric_columns_ = c(numeric_columns_,column)
print("")
print(numeric_columns_)
}
}
# numeric_columns_
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
# print(column)
numeric_columns_ = c(numeric_columns_,column)
print()
print(numeric_columns_)
}
}
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
# print(column)
numeric_columns_ = c(numeric_columns_,column)
print('')
print(numeric_columns_)
}
}
# numeric_columns_
data2 = data[,numeric_columns_]
View(data2)
View(data2)
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
numeric_columns_ = c(numeric_columns_,column)
}
}
numeric_columns_
# numeric columns only
test_numeric = test[,numeric_columns_]
train_numeric = train[,numeric_columns_]
View(train_numeric)
train_numeric = na.omit(train_numeric)
set.seed(280)
data = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
# randomize data
data = data[sample(nrow(data)),]
# size of the train and test set
train_size = floor(dim(data)[1] * .8)
test_size = dim(data)[1] - train_size
# subset data to get train and test sets
train = head(data,train_size)
test = tail(data,test_size)
# find interest rate
interest = grep("Interest", colnames(data), value = TRUE)
interest
data$lease = grepl("lease", data$Debt.Type, ignore.case = TRUE)
test$lease = grepl("lease", test$Debt.Type, ignore.case = TRUE)
train$lease = grepl("lease", train$Debt.Type, ignore.case = TRUE)
length(data)
nrow(data)
# this is just to print out which columns are numeric
numeric_columns_ = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
numeric_columns_ = c(numeric_columns_,column)
}
}
numeric_columns_
numeric_columns_with_most_data = c("TIC.Interest.Rate", "Principal.Amount", "New.Money", "Refunding.Amount", "Issue.Costs.Pct.of.Principal.Amt", "Total.Issuance.Costs", "UW.Total.Discount.Spread")
set.seed(280)
data = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
# randomize data
data = data[sample(nrow(data)),]
# size of the train and test set
train_size = floor(dim(data)[1] * .8)
test_size = dim(data)[1] - train_size
# subset data to get train and test sets
train = head(data,train_size)
test = tail(data,test_size)
# find interest rate
interest = grep("Interest", colnames(data), value = TRUE)
interest
nrow(data)
train_ = data[1:number,]
set.seed(280)
data = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
# randomize data
data = data[sample(nrow(data)),]
# size of the train and test set
train_size = floor(dim(data)[1] * .8)
test_size = dim(data)[1] - train_size
# subset data to get train and test sets
train = head(data,train_size)
test = tail(data,test_size)
# find interest rate
interest = grep("Interest", colnames(data), value = TRUE)
interest
data$lease = grepl("lease", data$Debt.Type, ignore.case = TRUE)
test$lease = grepl("lease", test$Debt.Type, ignore.case = TRUE)
train$lease = grepl("lease", train$Debt.Type, ignore.case = TRUE)
unique(data$lease)
dim(train)[1] + dim(test)[1] == dim(data)[1]
set.seed(280)
data = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
# randomize data
data = data[sample(nrow(data)),]
# size of the train and test set
train_size = floor(dim(data)[1] * .8)
test_size = dim(data)[1] - train_size
# subset data to get train and test sets
train = head(data,train_size)
test = tail(data,test_size)
# find interest rate
interest = grep("Interest", colnames(data), value = TRUE)
interest
data$lease = grepl("lease", data$Debt.Type, ignore.case = TRUE)
test$lease = grepl("lease", test$Debt.Type, ignore.case = TRUE)
train$lease = grepl("lease", train$Debt.Type, ignore.case = TRUE)
data2 = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
# numeric columns only
test_numeric = test[,numeric_columns]
# this is just to print out which columns are numeric
numeric_columns = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
numeric_columns = c(numeric_columns,column)
}
}
numeric_columns
numeric_columns_with_most_data = c("TIC.Interest.Rate", "Principal.Amount", "New.Money", "Refunding.Amount", "Issue.Costs.Pct.of.Principal.Amt", "Total.Issuance.Costs", "UW.Total.Discount.Spread")
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model1 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
summary(model)
summary(model1)
average_absolute_difference = function(predicted, actual) {
length = length(predicted)
difference = predicted - actual
# difference_squared = difference ** 2
# absolute_difference = sqrt(difference_squared)
absolute_difference = abs(predicted- actual)
sum(absolute_difference, na.rm = TRUE) / length
}
prediction1 = predict(model1, test, na.rm = TRUE)
aad1 = average_absolute_difference(prediction1, test$TIC.Interest.Rate)
aad1
prediction1 = predict(model1, test_numeric, na.rm = TRUE)
aad1 = average_absolute_difference(prediction1, test$TIC.Interest.Rate)
aad1
prediction2 = predict(model2, test_numeric, na.rm = TRUE)
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
summary(model1)
summary(model2)
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
summary(model1)
model2
model1_1 = lm(NIC.Interest.Rate ~ ., data = train_numeric)
summary(model1)
summary(model3)
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs + UW.Mngmt.Fee + UW.Total.Discount.Spread + Disclosure.Counsel.Fee + Trustee.Fee + Credit.Enhancement.Fee + Rating.Agency.Fee + Other.Issuance.Expenses)
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs + UW.Mngmt.Fee + UW.Total.Discount.Spread + Disclosure.Counsel.Fee + Trustee.Fee + Credit.Enhancement.Fee + Rating.Agency.Fee + Other.Issuance.Expenses, data = train_numeric)
summary(model1)
summary(model3)
# model2
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs +  UW.Total.Discount.Spread + Credit.Enhancement.Fee + Other.Issuance.Expenses, data = train_numeric)
summary(model1)
summary(model3)
# model2
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs +  UW.Total.Discount.Spread + Credit.Enhancement.Fee, data = train_numeric)
summary(model1)
summary(model3)
# model2
prediction1 = predict(model1, test_numeric)
difference = prediction - test$TIC.Interest.Rate
difference = prediction1 - test$TIC.Interest.Rate
difference = abs(difference)
mad = mean(difference)
mad
set.seed(280)
data = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
data2 = read.csv("/Users/austinwilson/coding/r/assignment9/CDA_ALL_Raw.csv")
# randomize data
data = data[sample(nrow(data)),]
# size of the train and test set
train_size = floor(dim(data)[1] * .8)
test_size = dim(data)[1] - train_size
# subset data to get train and test sets
train = head(data,train_size)
test = tail(data,test_size)
# find interest rate
interest = grep("Interest", colnames(data), value = TRUE)
interest
data$lease = grepl("lease", data$Debt.Type, ignore.case = TRUE)
test$lease = grepl("lease", test$Debt.Type, ignore.case = TRUE)
train$lease = grepl("lease", train$Debt.Type, ignore.case = TRUE)
# this is just to print out which columns are numeric
numeric_columns = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
numeric_columns = c(numeric_columns,column)
}
}
numeric_columns
numeric_columns_with_most_data = c("TIC.Interest.Rate", "Principal.Amount", "New.Money", "Refunding.Amount", "Issue.Costs.Pct.of.Principal.Amt", "Total.Issuance.Costs", "UW.Total.Discount.Spread")
# this is just to print out which columns are numeric
numeric_columns = c()
for (column in colnames(data)) {
if (class(data[,column])[1] == "numeric") {
numeric_columns = c(numeric_columns,column)
}
}
numeric_columns
numeric_columns_with_most_data = c("TIC.Interest.Rate", "Principal.Amount", "New.Money", "Refunding.Amount", "Issue.Costs.Pct.of.Principal.Amt", "Total.Issuance.Costs", "UW.Total.Discount.Spread")
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs +  UW.Total.Discount.Spread + Credit.Enhancement.Fee, data = train_numeric)
summary(model1)
summary(model3)
# model2
prediction1 = predict(model1, test_numeric, na.rm = TRUE)
length(prediction1)
length(test_numeric)
dim(test_numeric)[1]
length(prediction1) == dim(test_numeric)[1]
prediction1 = predict(model1, test_numeric, na.rm = TRUE)
prediction1
test_numeric$TIC.Interest.Rate
prediction1
model0 = lm(TIC.Interest.Rate ~ Principal.Amout, data = train_numeric)
model0 = lm(TIC.Interest.Rate ~ Principal.Amount, data = train_numeric)
summary(model1)
summary(model0)
?mse
?MSE
MSE(prediction1, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric)
# print them out ...
print(add1,"dslf")
average_absolute_difference = function(predicted, actual) {
difference = predicted - actual
absolute_difference = abs(predicted- actual)
mean(absolute_difference)
}
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric)
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test$TIC.Interest.Rate)
prediction2 = predict(model2, test_numeric)
aad2 = average_absolute_difference(prediction2, test$TIC.Interest.Rate)
# print them out ...
print(c("prediction average absolute difference 0:", add0))
print(c("prediction average absolute difference 1:", add1))
print(c("prediction average absolute difference 2:", add2))
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
add0
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test$TIC.Interest.Rate)
add1
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
add0
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test_numeric$TIC.Interest.Rate)
add1
prediction2 = predict(model2, test_numeric)
aad2 = average_absolute_difference(prediction2, test_numeric$TIC.Interest.Rate)
add2
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test_numeric$TIC.Interest.Rate)
add1
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
add0
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs +  UW.Total.Discount.Spread + Credit.Enhancement.Fee, data = train_numeric)
prediction3 = predict(model3, test_numeric)
aad3 = average_absolute_difference(prediction3, test_numeric$TIC.Interest.Rate)
add3
aad3
View(test_numeric)
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test_numeric$TIC.Interest.Rate)
add1
aad2
aad1
average_absolute_difference = function(predicted, actual) {
difference = predicted - actual
absolute_difference = abs(predicted- actual)
mean(absolute_difference)
}
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
add0
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test_numeric$TIC.Interest.Rate)
aad1
prediction2 = predict(model2, test_numeric)
aad2 = average_absolute_difference(prediction2, test_numeric$TIC.Interest.Rate)
aad2
prediction3 = predict(model3, test_numeric)
aad3 = average_absolute_difference(prediction3, test_numeric$TIC.Interest.Rate)
aad3
# print them out ...
print(c("prediction average absolute difference 0:", add0))
print(c("prediction average absolute difference 1:", add1))
print(c("prediction average absolute difference 2:", add2))
average_absolute_difference = function(predicted, actual) {
difference = predicted - actual
absolute_difference = abs(predicted- actual)
mean(absolute_difference)
}
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
add0
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test_numeric$TIC.Interest.Rate)
aad1
prediction2 = predict(model2, test_numeric)
aad2 = average_absolute_difference(prediction2, test_numeric$TIC.Interest.Rate)
aad2
prediction3 = predict(model3, test_numeric)
aad3 = average_absolute_difference(prediction3, test_numeric$TIC.Interest.Rate)
aad3
test_numeric$prediction0 = prediction0
abs_difference = function(predicted, actual) {
abs(predicted- actual)
}
abs_difference = function(predicted, actual) {
abs(predicted- actual)
}
average_absolute_difference = function(predicted, actual) {
absolute_difference = abs(predicted- actual)
mean(absolute_difference)
}
abs_difference = function(predicted, actual) {
abs(predicted- actual)
}
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
test_numeric$prediction0 = prediction0
test_numeric$difference0 = abs_difference(prediction0, test$TIC.Interest.Rate)
average_absolute_difference = function(predicted, actual) {
absolute_difference = abs(predicted- actual)
mean(absolute_difference)
}
abs_difference = function(predicted, actual) {
abs(predicted- actual)
}
prediction0 = predict(model0, test_numeric)
add0 = average_absolute_difference(prediction0, test_numeric$TIC.Interest.Rate)
test_numeric$prediction0 = prediction0
test_numeric$difference0 = abs_difference(prediction0, test_numeric$TIC.Interest.Rate)
prediction1 = predict(model1, test_numeric)
aad1 = average_absolute_difference(prediction1, test_numeric$TIC.Interest.Rate)
test_numeric$prediction1 = prediction1
test_numeric$difference1 = abs_difference(prediction1, test_numeric$TIC.Interest.Rate)
prediction2 = predict(model2, test_numeric)
aad2 = average_absolute_difference(prediction2, test_numeric$TIC.Interest.Rate)
test_numeric$prediction2 = prediction2
test_numeric$difference2 = abs_difference(prediction2, test_numeric$TIC.Interest.Rate)
prediction3 = predict(model3, test_numeric)
aad3 = average_absolute_difference(prediction3, test_numeric$TIC.Interest.Rate)
test_numeric$prediction3 = prediction3
test_numeric$difference3 = abs_difference(prediction3, test_numeric$TIC.Interest.Rate)
add0
aad1
aad2
aad3
?sort
test_numeric = test_numeric[order(difference3)]
test_numeric = test_numeric[order(difference3, data = test_numeric)]
test_numeric = test_numeric[order(difference3)]
which(max(test_numeric$difference3))
?which.max
test_numeric = test_numeric[order(test_numeric$difference3)]
test_numeric = test_numeric[order(test_numeric$difference3),]
head(test_numeric)
test_numeric$mother_russia = abs(prediction0 - test_numeric$TIC.Interest.Rate)
head(test_numeric)[1]
head(test_numeric)[0]
rows_of_interest = head(test_numeric)[0]
data[rows_of_interest]
head(test_numeric)[0]
head(test_numeric)
head(test_numeric)[0][1]
head(test_numeric)[0,1]
head(test_numeric)[0]
head(test_numeric)
head(test_numeric, ascending=FALSE)
head(test_numeric, ascending=TRUE)
?head
tail(test_numeric)
# these are the rows that we could not accurately predict
# 27674
# 35262
# 23857
# 50954
# 33339
# 64188
data[27674,]
data[35262,]
tail(test_numeric)
data[35262,]
data[23857,]
# numeric columns only
test_numeric = test[,numeric_columns]
test_numeric = na.omit(test_numeric)
train_numeric = train[,numeric_columns]
train_numeric = na.omit(train_numeric)
model0 = lm(TIC.Interest.Rate ~ Principal.Amount, data = train_numeric)
model1 = lm(TIC.Interest.Rate ~ ., data = train_numeric)
model2 = rpart(TIC.Interest.Rate ~ ., data = train_numeric)
model3 = lm(TIC.Interest.Rate ~ Principal.Amount + NIC.Interest.Rate + NIC.Interest.Rate + Issue.Costs.Pct.of.Principal.Amt + Total.Issuance.Costs +  UW.Total.Discount.Spread + Credit.Enhancement.Fee, data = train_numeric)
summary(model0)
summary(model1)
summary(model3)
# model2
data[50954,]
library("rpart")
