g = g + geom_line(aes(time, winnings), data = m)
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
for(i in 1:5) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
}
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
for(i in 1:5) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:4) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_abline(aes(time, average), data = m, color = "blue")
print(g)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:4) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:4) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:4) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:4) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:4) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
# View(m)
print(count)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:3) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
print(count)
doublebet = function(x, initialbet = 1, strategy = low)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(strategy(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
betsize = 2 * betsize
}
winnings[i] = current_winnings
}
winnings
}
ntimes = 30
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
doublebet = function(x, initialbet = 1, strategy = high)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(strategy(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
betsize = 2 * betsize
}
winnings[i] = current_winnings
}
winnings
}
ntimes = 30
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:3) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
# View(m)
print(count)
doublebet = function(x, initialbet = 1, strategy = even)
{
winnings = rep(NA, length(x))
betsize = initialbet
current_winnings = 0
for(i in seq_along(x)){
if(strategy(x[i]) == 1){
current_winnings = current_winnings + betsize
betsize = initialbet
} else {
current_winnings = current_winnings - betsize
betsize = 2 * betsize
}
winnings[i] = current_winnings
}
winnings
}
ntimes = 30
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
print(g)
# View(m)
ntimes = 1000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$winnings
count = 1
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
for(i in 1:3) {
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
m$average = m$average + m$winnings
count = count + 1
g = g + geom_line(aes(time, winnings), data = m, alpha = .2)
}
m$average = m$average / count
g = g + geom_line(aes(time, average), data = m, color = "blue")
print(g)
ntimes = 30000
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
print(g)
# View(m)
ntimes = 30
m = data.frame(time = seq(ntimes))
m$winnings = play(doublebet, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "The Martingale Strategy in Roulette", caption = "Simulated winnings over time for a single roulette player following the basic martingale betting strategy.")
g = g + geom_line(aes(time, winnings), data = m)
print(g)
# View(m)
```{r}
even = function(x)
{
win = (x %% 2 == 0) & (x != 0)
ifelse(win, 1, -1)
}
high = function(x)
{
win = (18 < x) & (x != 0)
ifelse(win, 1, -1)
}
column1 = function(x)
{
ifelse(x %% 3 == 1, 2, -1)
}
straightup = function(x, d = 1)
{
ifelse(x == d, 35, -1)
}
# Construct a simple betting strategy
simple_strategy = function(bet = even)
{
function(x) cumsum(bet(x))
}
#' Simulate plays from a betting strategy
#'
#' @param strategy
#' @param nplayers number of players to use this strategy
#' @param ntimes number of times each player should play
play = function(strategy = simple_strategy()
, nplayers = 100L
, ntimes = 1000L
, ballvalues = 0:36
){
replicate(nplayers, strategy(sample(ballvalues, size = ntimes, replace = TRUE)))
}
library(ggplot2)
theme_set(theme_bw())  # Feel free to set different themes
set.seed(42)
ntimes = 1000
d = data.frame(time = seq(ntimes))
s = simple_strategy(straightup)
d$winnings = play(s, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "Single game of roulette", caption = "Simulated winnings over time for a single roulette player betting one dollar on evens every time.")
g = g + geom_line(aes(time, winnings), data = d, alpha=.2)
# average
count = 1
d$average = d$winnings
for(i in 2:100) {
set.seed(i)
ntimes = 1000
#d = data.frame(time = seq(ntimes))
s = simple_strategy(straightup)
column_name = paste(c("winnings",i), collapse="")
d$winnings = play(s, nplayers = 1, ntimes = ntimes)
g = g + geom_line(aes(time, winnings), data = d, alpha=.2)
# average
count = count + 1
d$average = d$average + d$winnings
}
g = g + geom_abline(slope = 0, intercept = 0, col = "blue")
print(g)
df = read.csv("COVID-19_Case_Surveillance_Public_Use_Data.csv")
df = read.csv("COVID-19_Case_Surveillance_Public_Use_Data.csv")
```
df = read.csv("COVID-19_Case_Surveillance_Public_Use_Data.csv")
dim(df)
df = read.csv("COVID-19_Case_Surveillance_Public_Use_Data.csv")
dim(df)
View(df)
View(df)
covid_data = read.csv("COVID-19_Case_Surveillance_Public_Use_Data.csv")
dim(covid_data)
View(covid_data)
covid_data = read.csv("COVID-19_Case_Surveillance_Public_Use_Data.csv")
dim(covid_data)
is.na(covid_data)
sum(is.na(covid_data))
# TODO
covid_data$age_group
# TODO
unique(covid_data$age_group0
# TODO
unique(covid_data$age_group)
# TODO
unique(covid_data$age_group)
sum(covid_data == "missing")
sum(covid_data$Race.and.ethnicity..combined. == "Unknown")
covid_data$Race.and.ethnicity..combined. == "Unknown"
sum(covid_data$Race.and.ethnicity..combined. == "Unknown")
# sum(is.na(covid_data))
sum(covid_data$Race.and.ethnicity..combined. == "Unknown")
# sum(is.na(covid_data))
sum(covid_data$Race.and.ethnicity..combined. == "Unknown")
covid_data$Race.and.ethnicity..combined. == "Unknown"
unknown_race = covid_data$Race.and.ethnicity..combined. == "Unknown"
unknown_race = sum(covid_data$Race.and.ethnicity..combined. == "Unknown", na.rm = TRUE)
# sum(is.na(covid_data))
na_race = sum(is.na(covid_data$Race.and.ethnicity..combined.))
na_race
# onsetdt missing values
onsetdt_missing = sum(is.na(covid_data$onset_dt))
is.na(covid_data$onset_dt)
covid_data$onset_dt[2]
# onsetdt missing values
onsetdt_missing = sum(covid_data$onset_dt == "")
# current status missing values
unique(covid_data$current_status)
# sex missing values
unique(covid_data$sex)
for (column in col(covid_data)) {
print(column)
}
colnames(covid_data)
for (column in colnames(covid_data)) {
print(column)
}
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
print(column)
dim(column)
}
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
print(column)
print(dim(column))
}
colnames(covid_data)
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
print(column)
print(length(column))
}
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
print(column)
print(length(covid_names$column))
}
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
print(column)
length(covid_data$column)
}
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
#print(column)
print(length(covid_data$column))
}
for (column in colnames(covid_data)) {
na_count = 0
missing_count = 0
#print(column)
print(length(covid_data[,column]))
}
row_count = dim(covid_data)[1]
for (column in colnames(covid_data)) {
percent_missing = sum(column == "Missing", na.rm = TRUE)
print(column)
print(percent_missing/row_count)
}
sex_missing = sum(covid_data$sex == "Missing", na.rm = TRUE)
colnames(covid_data)
for (column in colnames(covid_data)) {
percent_missing = sum(covid_data[,column] == "Missing", na.rm = TRUE)
print(column)
print(percent_missing/row_count)
}
for (column in colnames(covid_data)) {
# different values possible to count
# "Missing"
missing = sum(covid_data[,column] == "Missing", na.rm = TRUE)
# unknown
unknown = sum(covid_data[,column] == "Unknown", na.rm = TRUE)
# "N/A"
na = sum(is.na(covid_data[,column]))
# blank or ""
blank = sum(covid_data[,column] == "", na.rm = TRUE)
total = sum(missing,unknown,na,blank)
print(column)
print(total/row_count)
}
count_missing(covid_data)
count_missing = function(data) {
row_count = dim(data[1])
for (column in colnames(data)) {
# different values possible to count
# "Missing"
missing = sum(data[,column] == "Missing", na.rm = TRUE)
# unknown
unknown = sum(data[,column] == "Unknown", na.rm = TRUE)
# "N/A"
na = sum(is.na(data[,column]))
# blank or ""
blank = sum(data[,column] == "", na.rm = TRUE)
total = sum(missing,unknown,na,blank)
percent_missing = total / row_count
print(column)
print(total/row_count)
}
}
count_missing(covid_data)
count_missing = function(data) {
row_count = dim(data)[1]
for (column in colnames(data)) {
# different values possible to count
# "Missing"
missing = sum(data[,column] == "Missing", na.rm = TRUE)
# unknown
unknown = sum(data[,column] == "Unknown", na.rm = TRUE)
# "N/A"
na = sum(is.na(data[,column]))
# blank or ""
blank = sum(data[,column] == "", na.rm = TRUE)
total = sum(missing,unknown,na,blank)
percent_missing = total / row_count
print(column)
print(total/row_count)
}
}
count_missing(covid_data)
?print
count_missing = function(data) {
row_count = dim(data)[1]
for (column in colnames(data)) {
# different values possible to count
# "Missing"
missing = sum(data[,column] == "Missing", na.rm = TRUE)
# unknown
unknown = sum(data[,column] == "Unknown", na.rm = TRUE)
# "N/A"
na = sum(is.na(data[,column]))
# blank or ""
blank = sum(data[,column] == "", na.rm = TRUE)
total = sum(missing,unknown,na,blank)
percent_missing = total / row_count
print(column)
print(total)
# print(total/row_count)
}
}
count_missing(covid_data)
test = data.frame(colnames(covid_data))
View(test)
