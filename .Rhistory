ifelse(win, 11, -1)
}
street(x,street2)
street(x)
street(x,c(7,8,8))
c1 = 1:34:3
c1
c1 = 1:10
c1
c1 = 1:10:2
c1
?seq
c1 = seq(1,34,3)
c1
c(1,4,7,10,13,16,19,22,25,28,31,34)
# first dozen
first_dozen = function(x) {
win = x %in% 1:12
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
first_dozen(x)
as.numberic(expected_value_column1)
as.numeric(expected_value_column1)
as.numeric(names(expected_value_column1))
# 4 -- using expected value of the first column containing values 1,4,7,10,13,16,19,22,25,28,31,3
# expected_value_column = (-1) * (25/37) + (2) * (12/37)
first_dozen_results = first_dozen(roulette_values)
first_dozen_results
first_dozen_tbl = table(first_dozen_results)
first_dozen_results = first_dozen(roulette_values)
first_dozen_results
first_dozen_tbl = table(first_dozen_results)
relative_tbl_first_dozen = first_dozen_tbl / sum(first_dozen_tbl)
expected_value_first_dozen = (-1) * relative_tbl_first_dozen[1] + (35) * relative_tbl_first_dozen[2]
as.numeric(expected_value_first_dozen)
first_dozen_results = first_dozen(roulette_values)
first_dozen_results
first_dozen_tbl = table(first_dozen_results)
relative_tbl_first_dozen = first_dozen_tbl / sum(first_dozen_tbl)
expected_value_first_dozen = (-1) * relative_tbl_first_dozen[1] + (2) * relative_tbl_first_dozen[2]
as.numeric(expected_value_first_dozen)
roulette_values
high_results = h(roulette_values)
high_results
high_tbl = table(high_results)
high_tbl
sum(high_tbl)
relative_tbl_high = tbl / sum(high_tbl)
relative_tbl_high
roulette_values
high_results = h(roulette_values)
high_results
high_tbl = table(high_results)
high_tbl
sum(high_tbl)
relative_tbl_high = high_tbl / sum(high_tbl)
relative_tbl_high
19/37
18/37
e_x_high
x
n = 100
roulette_values = 0:36
x = sample(roulette_values, size = n, replace = TRUE)
tbl = table(x)
tbl
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
low(x)
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
sum(win) - sum(!win)
}
low(x)
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
low(x)
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
low(x)
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
low(x)
low(20)
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
low(x)
n = 100
roulette_values = 0:36
x = sample(roulette_values, size = n, replace = TRUE)
#  high
h = function(x) {
win = x > 18
ifelse(win, 1,  -1)
}
h(x)
even = function(x)
{
win = (x %% 2 == 0) & (x != 0)
ifelse(win, 1, -1)
}
# TODO define low
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
low(x)
# not a fan of this problem
# 1
# expected_value_high = (-1) * (19/37) + (1) * (18/37)
high_results = h(roulette_values)
high_tbl = table(high_results)
sum(high_tbl)
relative_tbl_high = high_tbl / sum(high_tbl)
expected_value_high = (-1) * relative_tbl_high[1] + (1) * relative_tbl_high[2]
expected_value_high
x
# 2
# expected_value_low = (-1) * (19/37) + (1) * (18/37)
low_results = low(roulette_values)
low_tbl = table(low_results)
relative_tbl_low = low_tbl / sum(low_tbl)
expected_value_low = (-1) * relative_tbl_low[1] + (1) * relative_tbl_low[2]
expected_value_low
# 3
# expected_value_straightup = (-1) * (36/37) + (35) * (1/37)
straightup_results = straightup(roulette_values,3)
straightup = function(x, d) {
win = x == d
# sum(win) * amount_bet - sum(!win)
ifelse(win, 35, -1)
}
straightup(x,3)
# first dozen
first_dozen = function(x) {
win = x %in% 1:12
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
first_dozen(x)
# second dozen
second_dozen = function(x) {
win = x %in% 13:24
# sum(win) * 2 - sum(!win)
ifelse(win,2, -1)
}
second_dozen(x)
thrid_dozen = function(x) {
win = x %in% 25:36
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
# street 11x payout street1 is default (1,2,3)
street = function(x, street = c(1,2,3)) {
win = x %in% street
# sum(win) * 11 - sum(!win)
ifelse(win, 11, -1)
}
# top line .... payout 8x bet
top_line = function(x) {
win = ((x == 0) | (x == 1) | (x == 2) | (x == 3))
# sum(win) * 8 - sum(!win)
ifelse(win, 8, -1)
}
# column bet
column1 = function(x) {
win = x %in% c(1,4,7,10,13,16,19,22,25,28,31,34)
# win = x %in% seq(1,34,3)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
column2 = function(x) {
win = x %in% c(2,5,8,11,14,17,20,23,26,29,32,35)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
column3 = function(x) {
win = x %in% c(3,6,9,12,15,18,21,24,27,30,33,36)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
# column bet
column1 = function(x) {
win = x %in% c(1,4,7,10,13,16,19,22,25,28,31,34)
# win = x %in% seq(1,34,3)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
column2 = function(x) {
win = x %in% c(2,5,8,11,14,17,20,23,26,29,32,35)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
column3 = function(x) {
win = x %in% c(3,6,9,12,15,18,21,24,27,30,33,36)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
# not a fan of this problem
# 1
# expected_value_high = (-1) * (19/37) + (1) * (18/37)
high_results = h(roulette_values)
high_tbl = table(high_results)
sum(high_tbl)
relative_tbl_high = high_tbl / sum(high_tbl)
expected_value_high = (-1) * relative_tbl_high[1] + (1) * relative_tbl_high[2]
expected_value_high
x
# 2
# expected_value_low = (-1) * (19/37) + (1) * (18/37)
low_results = low(roulette_values)
low_tbl = table(low_results)
relative_tbl_low = low_tbl / sum(low_tbl)
expected_value_low = (-1) * relative_tbl_low[1] + (1) * relative_tbl_low[2]
expected_value_low
# 3
# expected_value_straightup = (-1) * (36/37) + (35) * (1/37)
straightup_results = straightup(roulette_values,3)
straightup_tbl = table(straightup_results)
relative_tbl_straightup = straightup_tbl / sum(straightup_tbl)
expected_value_straightup = (-1) * relative_tbl_straightup[1] + (35) * relative_tbl_straightup[2]
expected_value_straightup = as.numeric(expected_value_straightup)
# 4 -- using expected value of the first column containing values 1,4,7,10,13,16,19,22,25,28,31,3
# expected_value_column = (-1) * (25/37) + (2) * (12/37)
first_dozen_results = first_dozen(roulette_values)
first_dozen_results
first_dozen_tbl = table(first_dozen_results)
relative_tbl_first_dozen = first_dozen_tbl / sum(first_dozen_tbl)
expected_value_first_dozen = (-1) * relative_tbl_first_dozen[1] + (2) * relative_tbl_first_dozen[2]
expected_value_first_dozen = as.numeric(expected_value_first_dozen)
# expected_value_top_line = (-1) * (33/37) + (8) * (4/37)
# expected_value_street = (-1) * (34/37) + (11) * (3/37)
# other expected values
# expected_value_even = (-1) * (19/37) + (1) * (18/37)
# expected_value_odd = (-1) * (19/37) + (1) * (18/37)
#
# expected_value_red = (-1) * (19/37) + (1) * (18/37)
# expected_value_black = (-1) * (19/37) + (1) * (18/37)
expected_value_high = as.numeric(expected_value_high)
# not a fan of this problem
# 1
# expected_value_high = (-1) * (19/37) + (1) * (18/37)
high_results = h(roulette_values)
high_tbl = table(high_results)
sum(high_tbl)
relative_tbl_high = high_tbl / sum(high_tbl)
expected_value_high = (-1) * relative_tbl_high[1] + (1) * relative_tbl_high[2]
expected_value_high = as.numeric(expected_value_high)
# 2
# expected_value_low = (-1) * (19/37) + (1) * (18/37)
low_results = low(roulette_values)
low_tbl = table(low_results)
relative_tbl_low = low_tbl / sum(low_tbl)
expected_value_low = (-1) * relative_tbl_low[1] + (1) * relative_tbl_low[2]
expected_value_low = as.numeric(expected_value_low)
# 3
# expected_value_straightup = (-1) * (36/37) + (35) * (1/37)
straightup_results = straightup(roulette_values,3)
straightup_tbl = table(straightup_results)
relative_tbl_straightup = straightup_tbl / sum(straightup_tbl)
expected_value_straightup = (-1) * relative_tbl_straightup[1] + (35) * relative_tbl_straightup[2]
expected_value_straightup = as.numeric(expected_value_straightup)
# 4 -- using expected value of the first column containing values 1,4,7,10,13,16,19,22,25,28,31,3
# expected_value_column = (-1) * (25/37) + (2) * (12/37)
first_dozen_results = first_dozen(roulette_values)
first_dozen_tbl = table(first_dozen_results)
relative_tbl_first_dozen = first_dozen_tbl / sum(first_dozen_tbl)
expected_value_first_dozen = (-1) * relative_tbl_first_dozen[1] + (2) * relative_tbl_first_dozen[2]
expected_value_first_dozen = as.numeric(expected_value_first_dozen)
expected_value_high
expected_value_low
expected_value_straightup
expected_value_first_dozen
# other expected values
# expected_value_top_line = (-1) * (33/37) + (8) * (4/37)
# expected_value_street = (-1) * (34/37) + (11) * (3/37)
# expected_value_even = (-1) * (19/37) + (1) * (18/37)
# expected_value_odd = (-1) * (19/37) + (1) * (18/37)
# expected_value_red = (-1) * (19/37) + (1) * (18/37)
# expected_value_black = (-1) * (19/37) + (1) * (18/37)
# not a fan of this problem
# 1
# expected_value_high = (-1) * (19/37) + (1) * (18/37)
high_results = h(roulette_values)
high_tbl = table(high_results)
relative_tbl_high = high_tbl / sum(high_tbl)
expected_value_high = (-1) * relative_tbl_high[1] + (1) * relative_tbl_high[2]
expected_value_high = as.numeric(expected_value_high)
# 2
# expected_value_low = (-1) * (19/37) + (1) * (18/37)
low_results = low(roulette_values)
low_tbl = table(low_results)
relative_tbl_low = low_tbl / sum(low_tbl)
expected_value_low = (-1) * relative_tbl_low[1] + (1) * relative_tbl_low[2]
expected_value_low = as.numeric(expected_value_low)
# 3
# expected_value_straightup = (-1) * (36/37) + (35) * (1/37)
straightup_results = straightup(roulette_values,3)
straightup_tbl = table(straightup_results)
relative_tbl_straightup = straightup_tbl / sum(straightup_tbl)
expected_value_straightup = (-1) * relative_tbl_straightup[1] + (35) * relative_tbl_straightup[2]
expected_value_straightup = as.numeric(expected_value_straightup)
# 4 -- using expected value of the first column containing values 1,4,7,10,13,16,19,22,25,28,31,3
# expected_value_column = (-1) * (25/37) + (2) * (12/37)
first_dozen_results = first_dozen(roulette_values)
first_dozen_tbl = table(first_dozen_results)
relative_tbl_first_dozen = first_dozen_tbl / sum(first_dozen_tbl)
expected_value_first_dozen = (-1) * relative_tbl_first_dozen[1] + (2) * relative_tbl_first_dozen[2]
expected_value_first_dozen = as.numeric(expected_value_first_dozen)
expected_value_high
expected_value_low
expected_value_straightup
expected_value_first_dozen
# other expected values
# expected_value_top_line = (-1) * (33/37) + (8) * (4/37)
# expected_value_street = (-1) * (34/37) + (11) * (3/37)
# expected_value_even = (-1) * (19/37) + (1) * (18/37)
# expected_value_odd = (-1) * (19/37) + (1) * (18/37)
# expected_value_red = (-1) * (19/37) + (1) * (18/37)
# expected_value_black = (-1) * (19/37) + (1) * (18/37)
n = 100
roulette_values = 0:36
x = sample(roulette_values, size = n, replace = TRUE)
#  high
h = function(x) {
win = x > 18
ifelse(win, 1,  -1)
}
h(x)
#  high
h = function(x) {
win = x > 18
ifelse(win, 1,  -1)
}
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
straightup = function(x, d) {
win = x == d
# sum(win) * amount_bet - sum(!win)
ifelse(win, 35, -1)
}
low = function(x, amount_bet = 1) {
win = x <= 18 & x >= 1
ifelse(win, 1,-1)
# sum(win) - sum(!win)
}
# first dozen
first_dozen = function(x) {
win = x %in% 1:12
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
# second dozen
second_dozen = function(x) {
win = x %in% 13:24
# sum(win) * 2 - sum(!win)
ifelse(win,2, -1)
}
thrid_dozen = function(x) {
win = x %in% 25:36
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
# column bet
column1 = function(x) {
win = x %in% c(1,4,7,10,13,16,19,22,25,28,31,34)
# win = x %in% seq(1,34,3)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
column2 = function(x) {
win = x %in% c(2,5,8,11,14,17,20,23,26,29,32,35)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
column3 = function(x) {
win = x %in% c(3,6,9,12,15,18,21,24,27,30,33,36)
# sum(win) * 2 - sum(!win)
ifelse(win, 2, -1)
}
#  high
h = function(x) {
win = x > 18
ifelse(win, 1,  -1)
}
mean(h(roulette_values))
x = 3
x
even = function(x)
{
win = (x %% 2 == 0) & (x != 0)
ifelse(win, 1, -1)
}
high = function(x)
{
win = (18 < x) & (x != 0)
ifelse(win, 1, -1)
}
column1 = function(x)
{
ifelse(x %% 3 == 1, 2, -1)
}
straightup = function(x, d = 1)
{
ifelse(x == d, 35, -1)
}
# Construct a simple betting strategy
simple_strategy = function(bet = even)
{
function(x) cumsum(bet(x))
}
#' Simulate plays from a betting strategy
#'
#' @param strategy
#' @param nplayers number of players to use this strategy
#' @param ntimes number of times each player should play
play = function(strategy = simple_strategy()
, nplayers = 100L
, ntimes = 1000L
, ballvalues = 0:36
){
replicate(nplayers, strategy(sample(ballvalues, size = ntimes, replace = TRUE)))
}
library(ggplot2)
theme_set(theme_bw())  # Feel free to set different themes
set.seed(893) # Starts the random number generator at a particular place, so the graph will look the same for everyone.
ntimes = 20
d = data.frame(time = seq(ntimes))
s = simple_strategy(even)
d$winnings = play(s, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "Single game of roulette", caption = "Simulated winnings over time for a single roulette player betting one dollar on evens every time.")
g = g + geom_line(aes(time, winnings), data = d)
print(g)
even = function(x)
{
win = (x %% 2 == 0) & (x != 0)
ifelse(win, 1, -1)
}
high = function(x)
{
win = (18 < x) & (x != 0)
ifelse(win, 1, -1)
}
column1 = function(x)
{
ifelse(x %% 3 == 1, 2, -1)
}
straightup = function(x, d = 1)
{
ifelse(x == d, 35, -1)
}
# Construct a simple betting strategy
simple_strategy = function(bet = even)
{
function(x) cumsum(bet(x))
}
#' Simulate plays from a betting strategy
#'
#' @param strategy
#' @param nplayers number of players to use this strategy
#' @param ntimes number of times each player should play
play = function(strategy = simple_strategy()
, nplayers = 100L
, ntimes = 1000L
, ballvalues = 0:36
){
replicate(nplayers, strategy(sample(ballvalues, size = ntimes, replace = TRUE)))
}
library(ggplot2)
library(ggplot2)
theme_set(theme_bw())  # Feel free to set different themes
set.seed(893) # Starts the random number generator at a particular place, so the graph will look the same for everyone.
ntimes = 20
d = data.frame(time = seq(ntimes))
s = simple_strategy(even)
d$winnings = play(s, nplayers = 1, ntimes = ntimes)
g = ggplot() + labs(title = "Single game of roulette", caption = "Simulated winnings over time for a single roulette player betting one dollar on evens every time.")
g = g + geom_line(aes(time, winnings), data = d)
print(g)
# TODO create visualization(s)
# not betting strategy
not_bet = function(x) rep(0, length(x))
# TODO create visualization(s)
# not betting strategy
not_bet = function(x) rep(0, length(x))
