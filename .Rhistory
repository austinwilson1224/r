with(d,plot(x,y))
lines(d$x,predict(fit), col = "red")
lines(d$x,predict(fit1), col = "blue")
lines(d$x,predict(fit2), col = "green")
set.seed(138)
x = sort(runif(n = 1000, min = 0, max = 1))
epsilon = rnorm(n = 1000, mean = 0, sd = .1)
y = 5 * (x ** 2) - 4 * x + epsilon
d = data.frame(x,y)
d = d[order(x),]
fit = rpart(y ~ x + I(x^2), data = d)
fit1 = rpart(y ~ x + I(x^2),  data = d, minsplit = 20)
fit2 = rpart(y ~ x + I(x^2), data = d, minsplit=20,minbucket=200,maxdepth=20)
with(d,plot(x,y))
lines(d$x,predict(fit), col = "red")
lines(d$x,predict(fit1), col = "blue")
lines(d$x,predict(fit2), col = "green")
mse = function(model, d) {
mean((predict(model,d) - d$y) ** 2)
}
mse_linear = mse(linear_fit,d)
mse_quadratic = mse(quadratic_fit,d)
mse_rpart = mse(fit,d)
mse_rpart1 = mse(fit1,d_test)
mse = function(model, d) {
mean((predict(model,d) - d$y) ** 2)
}
mse_linear = mse(linear_fit,d)
mse_quadratic = mse(quadratic_fit,d)
mse_rpart = mse(fit,d)
mse_rpart1 = mse(fit1,d)
mse_rpart2 = mse(fit2,d)
mse_linear
mse_quadratic
mse_rpart1
mse_rpart2 # best performance
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = .5)
y = 3 * x + 5 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_rpart = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(fit_linear,d),col = "red")
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = .5)
y = 3 * x + 5 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_rpart = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = .5)
y = 3 * x + 5 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear # slightly lower
mse_rpart
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y = 4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
x = runif(n = 1000, min = 0, max = 1)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 10)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 10000)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 10000)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = 0, max = 10000)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -10, max = 10)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -10, max = 10)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = (x-8) ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = (x-8) ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = (x-8) ** 3 + 2 * x **2
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
y = 3 * x + 5 + noise
y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = (x-8) ** 3 + 2 * x **2 - 10
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)#, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d, minsplit=20,minbucket=20)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_linear
mse_rpart # slightly lower
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
lines(d$x,predict(cubic_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_cubic = mse(cubic_fit,d)
mse_linear
mse_rpart # lower
mse_cubic # lowest
x = runif(n = 100, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
lines(d$x,predict(cubic_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_cubic = mse(cubic_fit,d)
mse_linear
mse_rpart # lower
mse_cubic # lowest
x = runif(n = 100, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
x = runif(n = 100, min = -100, max = 100)
noise = rnorm(n = 100, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
lines(d$x,predict(cubic_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_cubic = mse(cubic_fit,d)
mse_linear
mse_rpart # lower
mse_cubic # lowest
x = runif(n = 1000, min = -100, max = 100)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
lines(d$x,predict(cubic_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_cubic = mse(cubic_fit,d)
mse_linear
mse_rpart # lower
mse_cubic # lowest
x = runif(n = 100, min = -10, max = 10)
noise = rnorm(n = 1000, mean = 0, sd = 2)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
x = runif(n = 100, min = -10, max = 10)
noise = rnorm(n = 100, mean = 0, sd = 10)
# y = 3 * x + 5 + noise
# y =  4 * x ** 4 + (3-x) ** 3 + x ** 2 + 3 + noise + sin(x)
y = x ** 3 + noise
d = data.frame(x,y)
d = d[order(x),]
linear_fit = lm(y ~ x, data = d)
rpart_fit = rpart(y ~ x, data  = d)
cubic_fit = lm(y ~ x + I(x^2) + I(x^3), data = d)
plot(x,y)
# sort(d$x)
lines(d$x,predict(linear_fit,d),col = "red")
lines(d$x,predict(rpart_fit,d), col = "red")
lines(d$x,predict(cubic_fit,d), col = "red")
mse_linear = mse(linear_fit,d)
mse_rpart = mse(rpart_fit,d)
mse_cubic = mse(cubic_fit,d)
mse_linear
mse_rpart # lower
mse_cubic # lowest
set.seed(138)
x = sort(runif(n = 1000, min = 0, max = 1))
epsilon = rnorm(n = 1000, mean = 0, sd = .1)
y = 5 * (x ** 2) - 4 * x + epsilon
d = data.frame(x,y)
d = d[order(x),]
fit = rpart(y ~ x + I(x^2), data = d)
fit1 = rpart(y ~ x + I(x^2),  data = d, minsplit = 20)
fit2 = rpart(y ~ x + I(x^2), data = d, minsplit=20,minbucket=200,maxdepth=20)
fit3 = rpart(y ~ x + I(x^2),  data = d, minbucket = 5)
with(d,plot(x,y))
lines(d$x,predict(fit), col = "red")
lines(d$x,predict(fit1), col = "blue")
lines(d$x,predict(fit2), col = "green")
lines(d$x,predict(fit3), col = "red")
set.seed(138)
x = sort(runif(n = 1000, min = 0, max = 1))
epsilon = rnorm(n = 1000, mean = 0, sd = .1)
y = 5 * (x ** 2) - 4 * x + epsilon
d = data.frame(x,y)
d = d[order(x),]
fit = rpart(y ~ x + I(x^2), data = d)
fit1 = rpart(y ~ x + I(x^2),  data = d, minsplit = 20)
fit2 = rpart(y ~ x + I(x^2), data = d, minsplit=20,minbucket=200,maxdepth=20)
fit3 = rpart(y ~ x + I(x^2),  data = d, minbucket = 5)
with(d,plot(x,y))
lines(d$x,predict(fit), col = "red")
lines(d$x,predict(fit1), col = "blue")
lines(d$x,predict(fit2), col = "green")
lines(d$x,predict(fit3))
