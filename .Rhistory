result
}
dunif2 = function(x, min, max) {
result = rep(0, length(x))
p = 1 / (max - min)
for(i in x) {
if(x[i] <= max & x[i] >= min) {
x[i] = p
}
else {
x[i] = 0
}
}
result
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
dunif2 = function(x, min = 0, max = 1) {
result = rep(0, length(x))
p = 1 / (max - min)
for(i in x) {
if(x[i] <= max & x[i] >= min) {
x[i] = p
}
else {
x[i] = 0
}
}
result
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
result = rep(0, length(x))
?ifelse
result = rep(0, length(x))
dunif2 = function(x, min = 0, max = 1) {
result = rep(0, length(x))
p = 1 / (max - min)
condition = ( (x >= min) & (x <= max))
ifelse(condition, p, 0)
# for(i in x) {
#   if(x[i] <= max & x[i] >= min) {
#     x[i] = p
#   }
#   else {
#     x[i] = 0
#   }
# }
# result
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
boolean_mask_4 =
median(mtcars2$mpg)
boolean_mask_4 =
median(mtcars$mpg)
boolean_mask_4 =
median(mtcars$mpg)
boolean_mask_4 =
median(mtcars$mpg)
boolean_mask_4 =
test = median(mtcars$mpg)
test
boolean_mask_4 = ( (mtcars$mpg > median_mpg) & (mtcars$cyl == number_cyl) )
median_mpg = median(mtcars$mpg)
number_cyl = 4
boolean_mask_4 = ( (mtcars$mpg > median_mpg) & (mtcars$cyl == number_cyl) )
# check(nrow(mtcars2) == 11)
mtcars2 = mtcars[boolean_mask_4,]
check(nrow(mtcars2) == 11)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg), color = gear)
View(mtcar)
View(mtcars)
View(mtcars)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg), color = gear)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg))
print(g)
?geom_line
View(mtcars)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg), color = mtcars$gear)
print(g)
# View(mtcars)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg), color = gear, data = mtcars)
# View(mtcars)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg), color = mtcars$gear, data = mtcars)
print(g)
# TODO
l_len2 = length(l)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
# TODO
l_len2 = length(l)
check(close_enough(l_len, l_len2))
# TODO
l_len2 = apply(x, length)
# TODO
l_len2 = apply(x, fun = length)
?apply
?lapply
# TODO
l_len2 = lapply(x, fun = length)
# TODO
l_len2 = lapply(x, FUN = length)
check(close_enough(l_len, l_len2))
# TODO
l_len2 = lapply(l, FUN = length)
check(close_enough(l_len, l_len2))
View(l_len2)
# TODO
l_len2 = sapply(l, FUN = length)
check(close_enough(l_len, l_len2))
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(from = -2.0, to = 5.0, by = .1)
check(x[1] == -2)
check(length(x) == 71)
df_uniform = data.frame(x)
df_uniform$unif1 = dunif(x, min =  0, max = 1)
df_uniform$unif2 = dunif(x, min =  -1, max = 2)
df_uniform$unif3 = dunif(x, min =  .5, max = 2.5)
g = ggplot() +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif1, color = "red")) +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif2, color = "blue")) +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif3, color = "green")) +
labs(title = "uniform function", xlab = "x value", ylab = "probability") +
# lab("test") +
ylab("probability")
g
## geom_line(data = example_lines, mapping = aes(x = time, y = winnings, group = player), alpha = 0.1, size = 0.3)
result = rep(0, length(x))
dunif2 = function(x, min = 0, max = 1) {
p = 1 / (max - min)
condition = ( (x >= min) & (x <= max))
ifelse(condition, p, 0)
}
x3 = seq(from = -10, to = 10)
check(close_enough(
dunif(x3), dunif2(x3)
))
check(close_enough(
dunif(x3, min = -0.5, max = 2.5),
dunif2(x3, min = -0.5, max = 2.5)
))
median_mpg = median(mtcars$mpg)
number_cyl = 4
boolean_mask_4 = ( (mtcars$mpg > median_mpg) & (mtcars$cyl == number_cyl) )
mtcars2 = mtcars[boolean_mask_4,]
check(nrow(mtcars2) == 11)
# View(mtcars)
g = ggplot(data = mtcars) +
geom_line(aes(x = disp, y = mpg), color = mtcars$gear, data = mtcars)
print(g)
l = list(letters, LETTERS, 1:10, rnorm(5))
l_len = c(length(l[[1]]), length(l[[2]]), length(l[[3]]), length(l[[4]]))
# TODO
l_len2 = sapply(l, FUN = length)
check(close_enough(l_len, l_len2))
sprintf("Auto score:  %i / %i total points", .score$PASS, .score$PASS + .score$FAIL)
mtcars
View(mtcars)
split(x = mtcars, f = mtcars$cyl)
cars = split(x = mtcars, f = mtcars$cyl)
View(cars)
lapply(cars$mpg, FUN = mean)
mean1 = lapply(cars$mpg, FUN = mean)
View(mean1)
mean1 = sapply(cars$mpg, FUN = mean)
View(mean1)
?split
cars = split(x = mtcars$mpg, f = mtcars$cyl)
mean1 = lapply(cars$mpg, FUN = mean)
mean1
View(mean1)
mean1 = sapply(cars$mpg, FUN = mean)
mean1
View(mean1)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(split(mtcars$mpg, mtcars$cyl), mean)
?lapply
?sapply
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean, simplify = "vector")
sapply(split(mtcars$mpg, mtcars$cyl), mean, simplify = "array")
sapply(split(mtcars$mpg, mtcars$cyl), mean, simplify = "list")
sapply(split(mtcars$mpg, mtcars$cyl), mean, simplify = "data frame")
cars = split(x = mtcars$mpg, f = mtcars$cyl)
mean1 = sapply(cars, FUN = mean)
mean1
mean1
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean, simplify = "array")
lapply(split(mtcars$mpg, mtcars$cyl), mean)
vector = sapply(split(mtcars$mpg, mtcars$cyl), mean, simplify = "array")
list = lapply(split(mtcars$mpg, mtcars$cyl), mean)
class(vector)
clas(list)
class(list)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(from = -2.0, to = 5.0, by = .1)
check(x[1] == -2)
library(ggplot2)
# Just ignore this code :)
.score = new.env()
.score$PASS = 0
.score$FAIL = 0
#' Check that your answer is correct.
#'
#' @param expr expression that should evaluate to TRUE if the answer is correct.
check = function(expr)
{
status = tryCatch(expr, error = identity)
if(isTRUE(status)){
.score$PASS = .score$PASS + 1
cat("PASS")
} else {
.score$FAIL = .score$FAIL + 1
cat("FAIL")
}
}
#' Check that every element of x and y are "close enough".
#'
#' @param x numeric vector
#' @param y numeric vector
close_enough = function(x, y, epsilon = 1e-5)
{
max(abs(x - y)) < epsilon
}
x = seq(from = -2.0, to = 5.0, by = .1)
check(x[1] == -2)
check(length(x) == 71)
x
df_uniform = data.frame(x)
df_uniform$unif1 = dunif(x, min =  0, max = 1)
df_uniform$unif2 = dunif(x, min =  -1, max = 2)
df_uniform$unif3 = dunif(x, min =  .5, max = 2.5)
g = ggplot() +
geom_abline(data = df_uniform, mapping = aes(x = x, y = unif1, color = "red")) +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif2, color = "blue")) +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif3, color = "green")) +
labs(title = "uniform function", xlab = "x value", ylab = "probability") +
ylab("probability")
g
df_uniform = data.frame(x)
df_uniform$unif1 = dunif(x, min =  0, max = 1)
df_uniform$unif2 = dunif(x, min =  -1, max = 2)
df_uniform$unif3 = dunif(x, min =  .5, max = 2.5)
g = ggplot() +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif1, color = "red")) +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif2, color = "blue")) +
geom_line(data = df_uniform, mapping = aes(x = x, y = unif3, color = "green")) +
labs(title = "uniform function", xlab = "x value", ylab = "probability") +
ylab("probability")
g
test = data.frame()
test$trash = c(1,2,3,4,5,)
test$trash = c(1,2,3,4,5)
test = data.frame(x = c(1,2,3,4,5))
test$trash = c(1,2,3,4,5)
test
test$trash = c(1,2,3,4,5,6)
test$trash = c(1,2,3,4,5)
test$trash = c("austin","john","wilson","is","super","cool")
test$trash = c("austin","john","wilson","is","cool")
test
2^31
table(mtcars[, c("cyl", "gear")])
mtcars[mtcars$cyl == 6,]
mtcars[(mtcars$cyl == 6) & (mtcars$gear %in% c(3,4)),]
sum(mtcars[(mtcars$cyl == 6) & (mtcars$gear %in% c(3,4)),])
count(mtcars[(mtcars$cyl == 6) & (mtcars$gear %in% c(3,4)),])
table(mtcars[(mtcars$cyl == 6) & (mtcars$gear %in% c(3,4)),])
find1 = function(x){
x = 1
}
find1(1232132)
test = find1(1232132)
test
seq_along(1:5, by = 2)
?seq_along
x = 1:5
seq_along(x, by = 2)
seq_along(along.with=1:5, by = 2)
seq_along(x)
?data.frame
18.33/20
?sample
?runif
temp = runif(n = 30, min = 0, max = 1)
temp
?sample
x = runif(n = 30, min = 0, max = 1)
x
y = 5 * (x ** 2) - 4 * x
set.seed(138)
x = runif(n = 30, min = 0, max = 1)
epsilon = rnorm(n = 30, mean = 0, sd = .1)
y = 5 * (x ** 2) - 4 * x + epsilon
plot(x,y)
fit1 = lm(y ~ x ** 2)
fit1 = lm(y ~ x ** 2)
x1 = seq(from = 0, to = 1, by = 0.1)
predict(fit1, data.frame(x1))
fit1 = lm(y ~ x ** 2)
x1 = seq(from = 0, to = 2.9, by = 0.1)
predict(fit1, data.frame(x1))
plot(x1,y)
fit1 = lm(y ~ x ** 2)
x1 = seq(from = 0, to = 2.9, by = 0.1)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred)
# Simulate data 
n = 200 
d = data.frame(x = runif(n)) 
d$y = 10 * d$x + 2 + rnorm(n)  
# Test / train split 
test_index = sample(n, size = round(n/2)) 
dtrain = d[test_index, ] 
dtest = d[-test_index, ]  
fit = lm(y ~ x, data = dtrain)
# Simulate data 
n = 200 
# Simulate data
n = 200
d = data.frame(x = runif(n))
d$y = 10 * d$x + 2 + rnorm(n)
# Test / train split
test_index = sample(n, size = round(n/2)) 
# Test / train split
test_index = sample(n, size = round(n/2))
dtrain = d[test_index, ]
dtest = d[-test_index, ]
fit = lm(y ~ x, data = dtrain)
?predict
predtions = predcit(fit,dtrain)
predtions = predict(fit,dtrain)
predictions
predictions = predict(fit,dtrain)
predictions
dtrain
mse = function(model, test_data) {
predictions = predict(model,test_data)
error = predictions - test_data$y
squared = error ** 2
mean = mean(squared)
mean
}
mse(fit, dtest)
fit1 = lm(y ~ x ** 2)
x1 = seq(from = 0, to = 2.9, by = 0.1)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred.sort())
fit1 = lm(y ~ x ** 2)
x1 = seq(from = 0, to = 2.9, by = 0.1)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred
fit1 = lm(y ~ x ** 2)
x1 = seq(from = 0, to = 2.9, by = 0.1)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred)
fit1 = lm(y ~ x)
x1 = seq(from = 0, to = 2.9, by = 0.1)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred)
fit1 = lm(y ~ x)
x1 = seq(from = 0, to = 2.9, by = 0.1)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred)
fit1 = lm(y ~ x)
x1 = seq(from = 0, to = 2.9, by = 0.1)
plot(x,y)
y_pred = predict(fit1, data.frame(x1))
plot(x1,y_pred)
fit1 = lm(y ~ x)
x1 = seq(from = 0, to = 2.9, by = 0.1)
plot(x,y)
y_pred = predict(fit1, data.frame(x1))
lines(x1,y_pred)
fit1 = lm(y ~ x)
x1 = seq(from = 0, to = 2.9, by = 0.1)
plot(x,y)
y_pred = predict(fit1, data.frame(x = x1))
lines(x1,y_pred)
set.seed(138)
x = runif(n = 300, min = 0, max = 1)
epsilon = rnorm(n = 300, mean = 0, sd = .1)
y = 5 * (x ** 2) - 4 * x + epsilon
plot(x,y)
fit1 = lm(y ~ x)
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred = predict(fit1, data.frame(x = x1))
lines(x1,y_pred)
fit1 = lm(y ~ x + I(x^2))
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred = predict(fit1, data.frame(x = x1))
lines(x1,y_pred)
fit1 = lm(y ~ x)
fit2 = lm(y ~ x + I(x^2))
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred1 = predict(fit1, data.frame(x = x1))
y_pred2 = predict(fit2, data.frame(x = x1))
lines(x1,y_pred1)
lines(x1,y_pred2)
fit1 = lm(y ~ x)
fit2 = lm(y ~ x + I(x^2))
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred1 = predict(fit1, data.frame(x = x1))
y_pred2 = predict(fit2, data.frame(x = x1))
lines(x1,y_pred1, col = "red")
lines(x1,y_pred2)
fit1 = lm(y ~ x)
fit2 = lm(y ~ x + I(x^2))
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred1 = predict(fit1, data.frame(x = x1))
y_pred2 = predict(fit2, data.frame(x = x1))
lines(x1,y_pred1, col = "red")
lines(x1,y_pred2, col = "blue")
fit1 = lm(y ~ x)
fit2 = lm(y ~ x + I(x^2))
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred1 = predict(fit1, data.frame(x = x1))
y_pred2 = predict(fit2, data.frame(x = x1))
lines(x1,y_pred1, col = "red")
lines(x1,y_pred2, col = "green")
fit1 = lm(y ~ x)
fit2 = lm(y ~ x + I(x^2))
x1 = seq(from = 0, to = 29, by = 0.1)
plot(x,y)
y_pred1 = predict(fit1, data.frame(x = x1))
y_pred2 = predict(fit2, data.frame(x = x1))
lines(x1,y_pred1, col = "red")
lines(x1,y_pred2, col = "blue")
