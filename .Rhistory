#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
data[data$Date <= "2020-08-15"]
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
data[,data$Date <= "2020-08-15"]
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
data[data$Date <= "2020-08-15",]
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
data["Date",]
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
data[,"Date"]
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
data[,"Date"] < "2020-08-15"
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
before_boolean_mask = data[,"Date"] < "2020-08-15"
before = data[, before_boolean_mask]
before = data[before_boolean_mask]
before = data[before_boolean_mask,]
after_boolean_mask = data[,"Date"] >= "2020-08-15"
dim(data)
after = data[after_boolean_mask,]
dim(before)
dim(after)
dim(data)[1] == dim(before)[1] + dim(after)
dim(data)[1] == dim(before)[1] + dim(after)[1]
View(data)
View(before)
View(after)
# 4. Create a comparative boxplot of "Daily.Mean.PM2.5.Concentration" in the month before the fire and the month after the fire.
#    Comment on what the boxplots show.
#    before and after august 15
# Hint: create a new column that indicates if the observation happened before or after the fire.
# Use your work above to implement the function below, and verify that it works for n = 100 and n = 50.
before_boolean_mask = data[,"Date"] < "2020-08-15" & data[,"Date"] > "2020-07-15"
after_boolean_mask = data[,"Date"] >= "2020-08-15"
dim(data)
before = data[before_boolean_mask,]
after = data[after_boolean_mask,]
dim(before)
dim(after)
dim(data)[1] == dim(before)[1] + dim(after)[1]
dim(after)[1]
dim(before)[1]
# before = data[1883:1909,c("Daily.Mean.PM2.5.Concentration", "Date")]
# after = data[1909:1935,c("Daily.Mean.PM2.5.Concentration", "Date")]
boxplot(split(before$Daily.Mean.PM2.5.Concentration, after$Daily.Mean.PM2.5.Concentration))
# before = data[1883:1909,c("Daily.Mean.PM2.5.Concentration", "Date")]
# after = data[1909:1935,c("Daily.Mean.PM2.5.Concentration", "Date")]
boxplot(before)
View(before)
View(after)
# before = data[1883:1909,c("Daily.Mean.PM2.5.Concentration", "Date")]
# after = data[1909:1935,c("Daily.Mean.PM2.5.Concentration", "Date")]
boxplot(before$Daily.Mean.PM2.5.Concentration)
?boxplot
# before = data[1883:1909,c("Daily.Mean.PM2.5.Concentration", "Date")]
# after = data[1909:1935,c("Daily.Mean.PM2.5.Concentration", "Date")]
boxplot(before$Daily.Mean.PM2.5.Concentration, after$Daily.Mean.PM2.5.Concentration)
air = read.csv("http://webpages.csus.edu/fitzgerald/files/stat128/fall20/ad_viz_plotval_data.csv")
data$Date = as.Date(x = data$Date, format = "%m/%d/%Y")
View(data)
#View(data)
columns(data)
#View(data)
colnames(data)
with(data = data, plot(Daily.Mean.PM2.5.Concentration~Date, type = "l"))
before_boolean_mask = data[,"Date"] < "2020-08-15" & data[,"Date"] > "2020-07-15"
after_boolean_mask = data[,"Date"] >= "2020-08-15"
before = data[before_boolean_mask,]
after = data[after_boolean_mask,]
boxplot(before$Daily.Mean.PM2.5.Concentration, after$Daily.Mean.PM2.5.Concentration)
# TODO
n_most_recent = d[n:,]
test = data[100:,]
test = data[100:]
n = 100
test = data[n:length(data)]
test = data[n:length(data),]
test
plot_pm2.5 = function(d, n = 100)
{
# TODO
n_most_recent = d[n:length(d),]
return n_most_recent
plot_pm2.5 = function(d, n = 100)
{
# TODO
n_most_recent = d[n:length(d),]
plot(n_most_recent)
}
plot_pm2.5(d = data, n = 50)
plot_pm2.5(d = data)
plot_pm2.5 = function(d, n = 100)
{
# TODO
n_most_recent = d[n-length(d):length(d),]
plot(n_most_recent)
}
plot_pm2.5(d = data)
plot_pm2.5(d = data, n = 50)
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
# TODO
n_most_recent = d[length(d)-n:length(d),]
plot(n_most_recent)
}
plot_pm2.5(d = data)
plot_pm2.5(d = data, n = 50)
?order
?tail
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
# TODO
order()
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data)
plot_pm2.5(d = data, n = 50)
?order
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
d[order(d$Date),]
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data) # n = 100 is default value
plot_pm2.5(d = data, n = 50)
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
d[order(d$Date, decreasing = TRUE),]
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data) # n = 100 is default value
plot_pm2.5(d = data, n = 50)
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
d[order(d$Date, decreasing = FALSE),]
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data) # n = 100 is default value
plot_pm2.5(d = data, n = 50)
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
d = d[order(d$Date, decreasing = FALSE),]
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data) # n = 100 is default value
plot_pm2.5(d = data, n = 50)
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
d = d[order(d$Date, decreasing = TRUE),]
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data) # n = 100 is default value
plot_pm2.5(d = data, n = 50)
#' Plot the n most recent PM2.5 particle measurements on the y axis, with date as the x axis.
#'
#' @param d data frame containing columns Daily.Mean.PM2.5.Concentration and Date for a single site
#' @param n number of observations to include
plot_pm2.5 = function(d, n = 100)
{
d = d[order(d$Date, decreasing = FALSE),] # to ensure data is sorted
n_most_recent = tail(x = d, n = n)
plot(n_most_recent)
}
plot_pm2.5(d = data) # n = 100 is default value
plot_pm2.5(d = data, n = 50)
?plot
# 3. Plot a line plot of the columns "Daily.Mean.PM2.5.Concentration" as a function of "Date".
#    Start one month before the fire and go to the end of the data set. Comment on what the graph shows.
# with(data, plot(as.Date(Date, "%m/%d/%y"), Daily.Mean.PM2.5.Concentration, xlab="Date", ylab="Conecntration", type = "l"))
# plot(as.Date(data$Date, "%m/%d/%y"), data$Daily.Mean.PM2.5.Concentration, )
plot(Daily.Mean.PM2.5.Concentration, type = "l", data = data)
# 3. Plot a line plot of the columns "Daily.Mean.PM2.5.Concentration" as a function of "Date".
#    Start one month before the fire and go to the end of the data set. Comment on what the graph shows.
# with(data, plot(as.Date(Date, "%m/%d/%y"), Daily.Mean.PM2.5.Concentration, xlab="Date", ylab="Conecntration", type = "l"))
# plot(as.Date(data$Date, "%m/%d/%y"), data$Daily.Mean.PM2.5.Concentration, )
plot(Daily.Mean.PM2.5.Concentration~Dat, type = "l", data = data)
# 3. Plot a line plot of the columns "Daily.Mean.PM2.5.Concentration" as a function of "Date".
#    Start one month before the fire and go to the end of the data set. Comment on what the graph shows.
# with(data, plot(as.Date(Date, "%m/%d/%y"), Daily.Mean.PM2.5.Concentration, xlab="Date", ylab="Conecntration", type = "l"))
# plot(as.Date(data$Date, "%m/%d/%y"), data$Daily.Mean.PM2.5.Concentration, )
plot(Daily.Mean.PM2.5.Concentration~Date, type = "l", data = data)
boolean_mask = data[,"Date"] > "2020-07-15"
boolean_mask
fire_data = data[boolean_mask,]
fire_data
#with(data = data, plot(Daily.Mean.PM2.5.Concentration~Date, type = "l"))
plot(Daily.Mean.PM2.5.Concentration~Date, type = "l", data = fire_data)
boolean_mask2 = data[,"Date"] > as.Date("2020-07-15",format="%Y-%m-%d")
boolean_mask2
boolean_mask2 = as.Date("2020-07-15",format="%Y-%m-%d") >data[,"Date"]
boolean_mask2
n = 100
roulette_values = 0:36
x = sample(roulette_values, size = n, replace = TRUE)
# TODO define low
low = function(x) {
win = x[(x > 0) & (x <=18),]
length(which(win))
}
low(x)
# TODO define low
low = function(x) {
win = x[((x > 0) & (x <=18)),]
length(which(win))
}
low(x)
# TODO define low
low = function(x) {
win = x[((x > 0) & (x <=18))]
length(which(win))
}
low(x)
# TODO define low
low = function(x) {
sum(x <  18)
}
low(x)
# TODO define low
low = function(x) {
sum(x <  18 & x > 0)
}
low(x)
# TODO define low
low = function(x) {
sum(x <  18 & x > 0)
}
low(x)
# TODO define low
low = function(x) {
win = x <= 18 & x > 0
# sum(x <  18 & x > 0)
}
low(x)
# TODO define low
low = function(x) {
win = x <= 18 & x > 0
# sum(x <  18 & x > 0)
print(win)
}
low(x)
# TODO define low
low = function(x) {
win = x <= 18 & x > 0
sum(win)
}
low(x)
n = 100
roulette_values = 0:36
x = sample(roulette_values, size = n, replace = TRUE)
# TODO define high
high = function(x, amount_bet = 1) {
win = x >= 18
# ifelse(win, 1, -1)
ifeslse(x, amount_bet,  -amount_bet)
}
high(x)
# TODO define high
high = function(x, amount_bet = 1) {
win = x >= 18
# ifelse(win, 1, -1)
ifelse(x, amount_bet,  -amount_bet)
}
high(x)
x
high(x)
x
# TODO define high
high = function(x, amount_bet = 1) {
win = x >= 18
# ifelse(win, 1, -1)
ifelse(win, amount_bet,  -amount_bet)
}
high(x)
x
e_x = sum(high(x))
e_x
# TODO define low
low = function(x) {
win = x < 18 & x > 0
sum(win)
}
low(x)
# TODO define low
low = function(x) {
win = x < 18 & x > 0
sum(win)
}
low(x)
View(x)
mean(x)
table(x)
high(x)
# 1
# expected value of high
# X = the case where the ball lands on a number greater than or equal to 18
probability_high = .5
expected_value_high = sum(high(x) * probability_high)
expected_value_high
# 2
# expected value of low
probability_low = 18 / 37
expected_value_low = sum(low(x) * probability_low)
expected_value_low
# TODO define low
low = function(x, amount_bet = 1) {
win = x < 18 & x > 0
sum(win)
}
low(x)
expected_value_low = low(x) * probability_low
expected_value_low
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet
}
straightup(x,13)
x
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet * 36
}
straightup(x,13)
x
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet * 36
}
straightup(x,1)
x
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet * 36
}
straightup(x)
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet * 36
}
straightup(x, 1)
x
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet * 36
}
straightup(x, 3)
x
# TODO define high
high = function(x, amount_bet = 1) {
win = x > 18
# ifelse(win, 1, -1)
ifelse(win, amount_bet,  -amount_bet)
}
high(x)
high_winnings = sum(high(x))
# TODO define low
low = function(x, amount_bet = 1) {
win = x < 18 & x > 0
sum(win)
}
low_winnings = low(x)
# TODO define straightup if you win straighup then you get 36 * your money back
straightup = function(x, d, amount_bet = 1) {
win = x == d
lose = x != d
print(sum(win) + sum(lose))
(sum(win) - sum(lose)) * amount_bet * 36
}
straightup_winnings = straightup(x, 3)
# TODO implement function
even = function (x, amount_bet = 1)  {
win = (x %% 2 == 0) & (x != 0)
lose = !win
((sum(win) / 2) - sum(lose)) * amount_bet
}
even_winnings = even(x)
# 3
# if you win straight up then you win 36* your money
probability_straightup = 1 / 37
# 4
# if you win even
probability_even = 18 / 37
# 4
# if you win even
probability_even = 18 / 37
expected_value_even = even_winnings * probability_even
expected_value_high
expected_value_low
# 3
# if you win straight up then you win 36* your money
probability_straightup = 1 / 37
expected_value_straightup = straightup_winnings * probability_straightup
expected_value_straightup
expected_value_even
# red / black
red_numbers = c(1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36)
black_numbers = c(2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35)
red = function(x) {
win = x %in% red_numbers
ifelse(win, 1, -1)
}
red(x)
# red / black
red_numbers = c(1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36)
black_numbers = c(2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35)
red = function(x, amount_bet = 1) {
win = x %in% red_numbers
# ifelse(win, 1, -1)
(sum(win) - sum(!win)) * amount_bet
}
red(x)
black = function(x, amount_bet = 1) {
win = x %in% black_numbers
# ifelse(win, 1, -1)
(sum(win) - sum(!win)) * amount_bet
}
# dozen bet
low_dozen = 1:12
low_dozen
# dozen bet
low_dozen = 1:12
mid_dozen = 13:24
high_dozen = 25:36
# column bet
column1 = c(1,4,7,10,13,16,19,22,25,28,31,34)
column2 = c(2,5,8,11,14,17,20,23,26,29,32,35)
column3 = c(3,6,9,12,15,18,21,24,27,30,33,36)
#  high
high = function(x, amount_bet = 1) {
win = x > 18
# ifelse(win, 1, -1)
ifelse(win, amount_bet,  -amount_bet)
}
high_winnings = sum(high(x))
